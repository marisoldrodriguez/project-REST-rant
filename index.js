// MODULES AND GLOBALS
require("dotenv").config();
const express = require("express"); // Require Express to consume modules.
const methodOverride = require('method-override') //Allows use of HTTP verbs i.e. PUT or DELETE
const app = express(); // Call express. Helps run a web server.
const bodyParser = require('body-parser')
app.use(bodyParser.json());
app.use(bodyParser.urlencoded({extended: true}));

// EXPRESS SETTINGS
// app.use("views", __dirname + "/views");
app.set("view engine", "jsx"); // This code defines the view engine (JSX in this case) that we will be using
app.engine("jsx", require("express-react-views").createEngine());
app.use(express.static('public'))
 // Static files are files that don't dynamically change - i.e., they aren't generated by code. It includes front-end code such as HTML, CSS, front-end JavaScript, and image assets. The code below let's Express know what you're going to call your static folder
app.use(methodOverride('_method')) // override using query string: POST having ?_method=DELETE

// CONTROLLERS AND ROUTES
// Imports routes to index.js from controllers folder file places (code to import the router)
app.use("/places", require("./controllers/places.js"));

// Body parser included in Express
// What does this do?
// Remember, when we send data with the POST verb, that data gets encrypted for its trip across the internet. Because it is protected this way while in transit, that makes it extra safe for usernames, passwords, and other sensitive data. However, it also means we will need an extra tool to decrypt that data for us.
app.use(express.urlencoded({ extended: true }));
app.use(express.json())

// Create a homepage
app.get("/", function (req, res) {
  res.render("home"); //Note: You don't have to specify the 'views' folder. It already knows to look for a 'views' folder when you call the render method!
});

app.post('/', (req, res) => {
  res.json(req.body)
})

// Wild card route - ensures user/client gets a graceful message that the path doesn't exist
app.get("*", (req, res) => {
  res.render("error404");
});

// Listen for Connections - keeps server open
app.listen(process.env.PORT, function () {
  console.log("I am awake!");
});
